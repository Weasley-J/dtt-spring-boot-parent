package ${modulePackage}.controller;

import com.baomidou.mybatisplus.core.toolkit.Wrappers;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import com.baomidou.mybatisplus.extension.plugins.pagination.PageDTO;

import ${domainFullyQualifiedClass};
import ${modulePackage}.service.${domainSimpleClassName}Service;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import java.util.Arrays;

/**
 * ${domainDescription}
 *
 * @author ${author}
 */
@Slf4j
@RestController
@RequestMapping("/api/${apiPathPrefix}")
public class ${domainSimpleClassName}Controller {

    @Autowired
    private ${domainSimpleClassName}Service ${domainCamelcaseName}Service;

    /**
     * ${domainDescription}分页查询
     *
     * @param pageParam 分页参数: current(当前页码,默认1), size(每页显示条数，默认10)
     * @param ${domainCamelcaseName}     ${domainDescription}查询参数
     * @return ${domainDescription}分页数据
     * @apiNote 请求示例: <a href="http://localhost:8080/api/${apiPathPrefix}/page?current=1&size=3">请求示例</a>
     * @see <a href="https://mp.baomidou.com/guide/page.html">Mybatis Plus官方分页插件配置示例</a>
     */
    @GetMapping("/page")
    public ResponseEntity<Page<${modelEntityName}>> page(@ModelAttribute("pageParam") PageDTO<${modelEntityName}> pageParam, @ModelAttribute("${domainCamelcaseName}") ${modelEntityName} ${domainCamelcaseName}) {
        Page<${modelEntityName}> params = new Page<>();
        params.setSize(pageParam.getSize());
        params.setCurrent(pageParam.getCurrent());
        Page<DttMember> page = ${domainCamelcaseName}Service.page(params, Wrappers.lambdaQuery(${domainCamelcaseName}));
        return ResponseEntity.ok(page);
    }

    /**
     * 获取${domainDescription}详情
     *
     * @param ${primaryKeyAttrName} ${domainDescription}主键id
     * @return ${domainDescription}详细信息
     */
    @GetMapping("/info/{${primaryKeyAttrName}}")
    public ResponseEntity<${modelEntityName}> info(@PathVariable("${primaryKeyAttrName}") ${primaryKeyAttrType} ${primaryKeyAttrName}){
        ${modelEntityName} ${domainCamelcaseName} = ${domainCamelcaseName}Service.getById(${primaryKeyAttrName});
        return ResponseEntity.ok(${domainCamelcaseName});
    }

    /**
     * 新增${domainDescription}
     *
     * @param ${domainCamelcaseName} ${domainDescription}元数据
     * @return 成功返回true,失败返回false
     */
    @PostMapping("/save")
    @Transactional(rollbackFor = {Exception.class})
    public ResponseEntity<Boolean> save(@RequestBody @Validated ${modelEntityName} ${domainCamelcaseName}) {
        boolean save = ${domainCamelcaseName}Service.save(${domainCamelcaseName});
        return ResponseEntity.ok(save);
    }

    /**
     * 修改${domainDescription}
     *
     * @param ${domainCamelcaseName} ${domainDescription}, 根据id选择性更新
     * @return 成功返回true,失败返回false
     */
    @PutMapping("/update")
    @Transactional(rollbackFor = {Exception.class})
    public ResponseEntity<Boolean> update(@RequestBody @Validated ${modelEntityName} ${domainCamelcaseName}) {
        boolean update = ${domainCamelcaseName}Service.updateById(${domainCamelcaseName});
        return ResponseEntity.ok(update);
    }

    /**
     * 批量删除${domainDescription}
     *
     * @param ${primaryKeyAttrName}s ${domainDescription}id集合
     * @return 成功返回true, 失败返回false
     */
    @DeleteMapping("/delete/{${primaryKeyAttrName}s}")
    @Transactional(rollbackFor = {Exception.class})
    public ResponseEntity<Boolean> delete(@PathVariable("${primaryKeyAttrName}s") ${primaryKeyAttrType}[] ${primaryKeyAttrName}s){
        boolean delete = ${domainCamelcaseName}Service.removeByIds(Arrays.asList(${primaryKeyAttrName}s));
        return ResponseEntity.ok(delete);
    }
}
